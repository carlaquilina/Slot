// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"slotengine/internal/reel"
	"sync"
)

// Ensure, that ReelMock does implement reel.Reel.
// If this is not the case, regenerate this file with moq.
var _ reel.Reel = &ReelMock{}

// ReelMock is a mock implementation of reel.Reel.
//
//	func TestSomethingThatUsesReel(t *testing.T) {
//
//		// make and configure a mocked reel.Reel
//		mockedReel := &ReelMock{
//			SpinFunc: func() ([]string, error) {
//				panic("mock out the Spin method")
//			},
//		}
//
//		// use mockedReel in code that requires reel.Reel
//		// and then make assertions.
//
//	}
type ReelMock struct {
	// SpinFunc mocks the Spin method.
	SpinFunc func() ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Spin holds details about calls to the Spin method.
		Spin []struct {
		}
	}
	lockSpin sync.RWMutex
}

// Spin calls SpinFunc.
func (mock *ReelMock) Spin() ([]string, error) {
	if mock.SpinFunc == nil {
		panic("ReelMock.SpinFunc: method is nil but Reel.Spin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSpin.Lock()
	mock.calls.Spin = append(mock.calls.Spin, callInfo)
	mock.lockSpin.Unlock()
	return mock.SpinFunc()
}

// SpinCalls gets all the calls that were made to Spin.
// Check the length with:
//
//	len(mockedReel.SpinCalls())
func (mock *ReelMock) SpinCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSpin.RLock()
	calls = mock.calls.Spin
	mock.lockSpin.RUnlock()
	return calls
}
