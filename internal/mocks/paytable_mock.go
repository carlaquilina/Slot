// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"slotengine/internal/paytable"
	"sync"
)

// Ensure, that PayTableMock does implement paytable.PayTable.
// If this is not the case, regenerate this file with moq.
var _ paytable.PayTable = &PayTableMock{}

// PayTableMock is a mock implementation of paytable.PayTable.
//
//	func TestSomethingThatUsesPayTable(t *testing.T) {
//
//		// make and configure a mocked paytable.PayTable
//		mockedPayTable := &PayTableMock{
//			CalculatePayoutFunc: func(matrix [3][4]string, bet float64) (float64, error) {
//				panic("mock out the CalculatePayout method")
//			},
//		}
//
//		// use mockedPayTable in code that requires paytable.PayTable
//		// and then make assertions.
//
//	}
type PayTableMock struct {
	// CalculatePayoutFunc mocks the CalculatePayout method.
	CalculatePayoutFunc func(matrix [3][4]string, bet float64) (float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CalculatePayout holds details about calls to the CalculatePayout method.
		CalculatePayout []struct {
			// Matrix is the matrix argument value.
			Matrix [3][4]string
			// Bet is the bet argument value.
			Bet float64
		}
	}
	lockCalculatePayout sync.RWMutex
}

// CalculatePayout calls CalculatePayoutFunc.
func (mock *PayTableMock) CalculatePayout(matrix [3][4]string, bet float64) (float64, error) {
	if mock.CalculatePayoutFunc == nil {
		panic("PayTableMock.CalculatePayoutFunc: method is nil but PayTable.CalculatePayout was just called")
	}
	callInfo := struct {
		Matrix [3][4]string
		Bet    float64
	}{
		Matrix: matrix,
		Bet:    bet,
	}
	mock.lockCalculatePayout.Lock()
	mock.calls.CalculatePayout = append(mock.calls.CalculatePayout, callInfo)
	mock.lockCalculatePayout.Unlock()
	return mock.CalculatePayoutFunc(matrix, bet)
}

// CalculatePayoutCalls gets all the calls that were made to CalculatePayout.
// Check the length with:
//
//	len(mockedPayTable.CalculatePayoutCalls())
func (mock *PayTableMock) CalculatePayoutCalls() []struct {
	Matrix [3][4]string
	Bet    float64
} {
	var calls []struct {
		Matrix [3][4]string
		Bet    float64
	}
	mock.lockCalculatePayout.RLock()
	calls = mock.calls.CalculatePayout
	mock.lockCalculatePayout.RUnlock()
	return calls
}
